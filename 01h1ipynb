{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Huillotl/01h1/blob/main/Untitled2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 892
        },
        "id": "gNeoHswCioNK",
        "outputId": "9131c791-ab12-4ad0-e48d-fd5edc8837a0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Tablero inicial:\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Vecino aleatorio:\n",
            "Ejecutando Recocido Simulado...\n",
            "Se Usaron todas las iteraciones 1\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import random\n",
        "import math\n",
        "\n",
        "def generate_valid_bitstrings(n):\n",
        "    \"\"\"Genera todas las cadenas binarias de longitud n con n/2 unos,\n",
        "    y que no tengan tres bits consecutivos iguales.\"\"\"\n",
        "    bit_strings = []\n",
        "    for i in range(2**n):\n",
        "        binary = bin(i)[2:].zfill(n)\n",
        "        if binary.count('1') != n // 2:\n",
        "            continue\n",
        "        if '000' in binary or '111' in binary:\n",
        "            continue\n",
        "        bit_strings.append([int(b) for b in binary])\n",
        "    return np.array(bit_strings)\n",
        "\n",
        "def imprimir_tablero(tab):\n",
        "    plt.imshow(tab, cmap='coolwarm')\n",
        "\n",
        "    plt.yticks(np.arange(tab.shape[0]) + 0.45, [])\n",
        "    plt.xticks(np.arange(tab.shape[0]) + 0.50, [])\n",
        "    plt.gca().set_aspect('equal')\n",
        "    plt.grid(True, which='both', linestyle='-', linewidth=0.5, color='black')\n",
        "    plt.show()\n",
        "\n",
        "def cost(tab,posicion_objetivo=None,valor_objetivo=None):\n",
        "    \"\"\"Calcula un puntaje basado en cuántas reglas se violan.\"\"\"\n",
        "    n = len(tab)\n",
        "    violations = 0\n",
        "    cols=[]\n",
        "    if posicion_objetivo is not None and valor_objetivo is not None:\n",
        "        for pos, val in zip(posicion_objetivo, valor_objetivo):\n",
        "            row, col = pos\n",
        "            if tab[row, col] != val:\n",
        "                violations += 1\n",
        "    for i in range(n):\n",
        "        col = tab[:, i]\n",
        "        if np.count_nonzero(col == 0) != n // 2:\n",
        "            violations+=1\n",
        "        for j in range(n - 2):\n",
        "            if col[j] == col[j+1] == col[j+2]:\n",
        "                violations+=13\n",
        "        cols.append(col)\n",
        "    cols=np.array(cols)\n",
        "    violations+=n-np.unique(cols,axis=0).shape[0]\n",
        "    return violations\n",
        "\n",
        "\n",
        "\n",
        "def obtener_complemento(inicial, validos):\n",
        "    return [x for x in validos if not any(np.array_equal(x, y) for y in inicial)]\n",
        "\n",
        "def vecino_aleatorio(tab, validos):\n",
        "    \"\"\"Genera una variación del tablero modificando una fila aleatoria.\"\"\"\n",
        "    disponibles = obtener_complemento(tab, validos)\n",
        "    n = tab.shape[0]\n",
        "    new_tab = tab.copy()\n",
        "    fila = random.randint(0, n - 1)\n",
        "    nueva_fila = disponibles[random.randint(0, len(disponibles) - 1)]\n",
        "    new_tab[fila] = nueva_fila\n",
        "    return new_tab\n",
        "\n",
        "def simulated_annealing(board, validos,posicion_objetivo,valores_objetivo, max_iter=100000, temp=1000, cooling_rate=0.0.9921875, temp_min=1e-20):\n",
        "    current_board = board.copy()\n",
        "    current_cost = cost(current_board)\n",
        "\n",
        "    for i in range(max_iter):\n",
        "        temp *= cooling_rate\n",
        "        if temp <= temp_min:\n",
        "            print(\"Temperatura 0\",i)\n",
        "            break\n",
        "\n",
        "        vecino = vecino_aleatorio(current_board, validos)\n",
        "        costo = cost(vecino,posicion_objetivo,valores_objetivo)\n",
        "\n",
        "        if costo == 0:\n",
        "            print(\"SOLUCIONADO\")\n",
        "            return vecino\n",
        "\n",
        "        delta = costo - current_cost\n",
        "        if delta < 0 or random.uniform(0, 1) < math.exp(-delta / temp):\n",
        "            current_board = vecino\n",
        "            current_cost = costo\n",
        "    print(\"Se Usaron todas las iteraciones\", current_cost)\n",
        "    return current_board\n",
        "\n",
        "\n",
        "\n",
        "n = 12#Tiene que ser un nuero par\n",
        "columnas_validas = generate_valid_bitstrings(n)\n",
        "inicial = columnas_validas[:n]\n",
        "posicion_objetivo = [(0, 0), (6, 6), (4, 3)]\n",
        "valores_objetivo = [1, 0, 1]\n",
        "\n",
        "print(\"Tablero inicial:\")\n",
        "\n",
        "imprimir_tablero(inicial)\n",
        "\n",
        "print(\"Vecino aleatorio:\")\n",
        "#vecino = vecino_aleatorio(inicial, columnas_validas)\n",
        "#imprimir_tablero(vecino)\n",
        "\n",
        "print(\"Ejecutando Recocido Simulado...\")\n",
        "resultado = simulated_annealing(inicial, columnas_validas,posicion_objetivo,valores_objetivo)\n",
        "#k=np.zeros_like(inicial)\n",
        "#k[:, 1] = inicial[:, 2]\n",
        "\n",
        "imprimir_tablero(resultado)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "dvuRARHnoAfb",
        "outputId": "00895b57-d13d-494e-a6f4-34bbec0b43b8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Visualización con Matplotlib:\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "def imprimir_tablero(tab):\n",
        "    plt.imshow(tab, cmap='coolwarm')\n",
        "\n",
        "    plt.yticks(np.arange(tab.shape[0]) + 0.45, [])\n",
        "    plt.xticks(np.arange(tab.shape[0]) + 0.50, [])\n",
        "    plt.gca().set_aspect('equal')\n",
        "    plt.grid(True, which='both', linestyle='-', linewidth=0.5, color='black')\n",
        "    plt.show()\n",
        "\n",
        "# Ejemplo de uso con el resultado\n",
        "print(\"Visualización con Matplotlib:\")\n",
        "imprimir_tablero(resultado)\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPdb9ywk1LgFDDSg8HktkJW",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
